RUTAS DEL BACK CON SUS SUB-RUTAS Y DETALLES
(apretar "alt" + "z" para una lectura cómoda)

***************************  RUTAS DE USUARIO
- GET: (/Broker)   Esta ruta define un controlador que maneja solicitudes GET relacionadas con usuarios en una base de datos. El controlador toma dos parámetros opcionales: rol y person_type. Si no se proporciona ninguno de ellos, devuelve todos los usuarios de la base de datos. Si se proporciona rol y person_type, devuelve todos los usuarios con ese rol y person_type. Si se proporciona rol pero no person_type, devuelve todos los usuarios con ese rol. Si se proporciona person_type pero no rol, devuelve todos los usuarios con ese person_type.

-POST: (/Broker)   La ruta permite crear un nuevo usuario en la base de datos. El controlador primero valida que todos los campos necesarios se hayan proporcionado en la solicitud. Si se encuentra algún campo faltante, se devuelve un mensaje de error.Si todos los campos están completos, el controlador crea un nuevo usuario en la base de datos y devuelve una respuesta con un mensaje de éxito y los datos del usuario creado. (Si ocurre algún error durante la creación del usuario, el controlador maneja el error y devuelve una respuesta con un código de estado HTTP adecuado y un mensaje de error en caso de que se produzca un error.)


*****************************  RUTAS DE SIGNAL  (señas)

-GET: (/Signal) la ruta que permite obtener una lista de señales almacenadas en la base de datos. Los usuarios pueden filtrar las señales por operation y/o situation.

Si se proporcionan los parámetros de filtrado, se llama a una función correspondiente (searchOperationSignal o searchSituationSignal) que devuelve las señales que coinciden con los valores de los parámetros de filtrado. Si no se proporcionan parámetros de filtrado, se obtienen todas las señales mediante la función getAllSignals.

Si ocurre algún error durante la búsqueda de señales o en la respuesta, el controlador maneja el error y devuelve una respuesta con un código de estado HTTP adecuado y un mensaje de error en caso de que se produzca un error.

.........................................................................................

-GET: (/Signal/:id) Permite  obtener una señal específica de la base de datos. Recibe el ID de la señal en los parámetros de la solicitud, luego llama a la función getSignal para buscar la señal correspondiente en la base de datos. Si la señal es encontrada, devuelve una respuesta con la señal en formato JSON y un código de estado HTTP 200. Si ocurre un error durante la búsqueda, devuelve un mensaje de error y un código de estado HTTP apropiado.

.........................................................................................
-POST: (/Signal)  Permite crear una nueva seña en la base de datos. Recibe los datos de la señal en el cuerpo de la solicitud, luego llama a la función create de la tabla Signal para insertar la nueva señal en la base de datos. También actualiza el estado de la propiedad asociada a la señal, cambiándolo a "Reservado". Si la señal es creada con éxito, devuelve un mensaje de éxito y un código de estado HTTP 200. Si ocurre un error durante la creación, devuelve un mensaje de error y un código de estado HTTP apropiado.

.........................................................................................

-PUT: (/Signal/:id) Esta ruta define un controlador llamado putProp que se encarga de actualizar la información de una señal existente en la base de datos. Se espera que el cliente incluya en el cuerpo de la solicitud (req.body) enviando como objeto la propiedad y el valor a actualizar.


************************  RUTAS DE PROPERTY  (faltan los filtros)

-GET: (/Property)  Recupera todas las propiedades de la base de datos y las devuelve como una respuesta JSON. Si se produce algún error al recuperar las propiedades, se devuelve un objeto JSON que contiene el mensaje de error correspondiente.

......................................................................................

-POST: (/Property) Crea una nueva propiedad en la base de datos. Si se crea correctamente, se devuelve un objeto JSON con un mensaje de éxito. Si se produce algún error al crear la propiedad, se devuelve un objeto JSON que contiene el mensaje de error correspondiente

.........................................................................................

-Delete: (/Property/:id)  Para eliminar un registro de ina "property" específica por su ID. Toma el ID de la "Property" como un parámetro en la URL y devuelve una respuesta HTTP con un código de estado 200 y un mensaje de éxito si la "Property" se elimina correctamente. Si no se puede eliminar la "Property", devuelve una respuesta HTTP con un código de estado 404 y un mensaje de error.
******************************* RUTAS BROKER 

-GET: (/Broker) Para obtener todos los registros de "brokers". Devuelve una respuesta HTTP con un código de estado 200 y los brokers encontrados en formato JSON. Si hay algún error, devuelve una respuesta HTTP con un código de estado 404 y un mensaje de error.

.........................................................................................

-GET: (/Broker/:id) Para obtener un registro específico de "broker" por su ID. Toma el ID como un parámetro en la URL y devuelve una respuesta HTTP con un código de estado 200 y el "broker" encontrado en formato JSON. Si no se encuentra ningún "broker" con el ID dado, devuelve una respuesta HTTP con un código de estado 404 y un mensaje de error.
.........................................................................................

-POST: (/Broker) Para crear un nuevo registro de "broker". Toma los datos del nuevo "broker" en el cuerpo de la solicitud y devuelve una respuesta HTTP con un código de estado 200 y el "broker" creado en formato JSON. Si hay algún error en la creación del "broker", devuelve una respuesta HTTP con un código de estado 404 y un mensaje de error.

.........................................................................................

-DELETE: (/Broker/:id) Para eliminar un registro de "broker" específico por su ID. Toma el ID del "broker" como un parámetro en la URL y devuelve una respuesta HTTP con un código de estado 200 y un mensaje de éxito si el "broker" se elimina correctamente. Si no se puede eliminar el "broker", devuelve una respuesta HTTP con un código de estado 404 y un mensaje de error.



